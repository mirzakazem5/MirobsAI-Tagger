import { Translations } from './types';

export const en: Translations = {
    // Settings sections
    settings: {
        llm: {
            title: "LLM Settings",
            serviceType: "Service Type",
            serviceTypeDesc: "Select the LLM service you want to use",
            cloudProvider: "Cloud Provider",
            cloudProviderDesc: "Choose your preferred cloud service provider",
            localEndpoint: "Local Endpoint",
            localEndpointDesc: "Configure the local LLM service endpoint URL",
            modelName: "Model Name",
            modelNameDesc: "Enter the model name you want to use",
            apiEndpoint: "API Endpoint",
            apiEndpointDesc: "Enter the API endpoint URL",
            apiKey: "API Key",
            apiKeyDesc: "Enter your API key",
            connectionTest: "Connection Test",
            connectionTestDesc: "Test the connection to LLM service",
            testConnection: "Test Connection",
            testing: "Testing...",
            connectionSuccessful: "Connection successful",
            connectionFailed: "Connection failed",
            debugMode: "Debug Mode",
            debugModeDesc: "Enable debug mode for detailed logging",
            debugEnabled: "Debug mode enabled",
            debugDisabled: "Debug mode disabled",
            tipsPopularTools: "Popular Tools Tips"
        },
        tagging: {
            title: "Tagging Settings",
            taggingMode: "Tagging Mode",
            taggingModeDesc: "Choose how tags should be generated",
            mode: "Mode",
            modeDesc: "Tag generation mode",
            modePredefined: "Use predefined tags only",
            modeGenerate: "Generate new tags",
            modeHybrid: "Hybrid mode (Generate + Predefined)",
            modeCustom: "Use custom prompt",
            tagSource: "Tag Source",
            tagSourceDesc: "Choose where to get the predefined tags from",
            sourceFile: "From predefined tags file",
            sourceVault: "From all existing tags in vault",
            predefinedTagsFile: "Predefined tags file",
            predefinedTagsFileDesc: "Path to a file containing predefined tags (one tag per line)",
            fileExclusion: "File Exclusion",
            excludedFiles: "Excluded files and folders",
            excludedFilesDesc: "Files matching these patterns will be hidden in Search, Graph View, and Unlinked Mentions, less noticeable in Quick Switcher and link suggestions.",
            manage: "Manage",
            noExclusions: "No exclusions configured",
            patternsConfigured: "patterns configured",
            tagRangeSettings: "Tag Range Settings",
            maxPredefinedTags: "Maximum predefined tags",
            maxPredefinedTagsDesc: "Maximum number of predefined tags to use (0-10). Used in Predefined and Hybrid modes.",
            maxGeneratedTags: "Maximum generated tags",
            maxGeneratedTagsDesc: "Maximum number of new tags to generate (0-10). Used in Generate and Hybrid modes.",
            outputLanguage: "Output Language",
            outputLanguageDesc: "Language for generating tags",
            customPrompt: "Custom Prompt",
            customPromptDesc: "Enter your custom prompt.",
            pathPlaceholder: "Enter path or pattern...",
            customPromptPlaceholder: "Enter custom prompt..."
        },
        support: {
            title: "Support",
            description: "If you find this plugin useful, please consider supporting me",
            supportText: "If you find this plugin useful, please consider supporting me",
            buyMeACoffee: "Buy me a coffee",
            buyCoffee: "Buy me a coffee"
        },
        interface: {
            title: "Interface",
            language: "Language",
            languageDesc: "Choose your preferred interface language"
        }
    },

    // Commands
    commands: {
        generateForCurrentNote: "Generate tags for current note",
        generateTagsForCurrentNote: "Generate tags for current note",
        generateForCurrentFolder: "Generate tags for current folder",
        generateTagsForCurrentFolder: "Generate tags for current folder",
        generateForVault: "Generate tags for vault",
        generateTagsForVault: "Generate tags for vault",
        clearTagsForCurrentNote: "Clear tags for current note",
        clearTagsForCurrentFolder: "Clear tags for current folder",
        clearTagsForVault: "Clear tags for vault",
        collectAllTags: "Collect all tags",
        showTagNetwork: "Show tag network",
        aiTagSelectedNotes: "AI Tag Selected Notes",
        aiTagThisNote: "AI Tag This Note",
        assignPredefinedTagsForCurrentNote: "Assign predefined tags to current note",
        assignPredefinedTagsForCurrentFolder: "Assign predefined tags to current folder",
        assignPredefinedTagsForVault: "Assign predefined tags to vault"
    },

    // Messages and notifications
    messages: {
        openNote: "Please open a note",
        noContent: "Note content is empty",
        analyzing: "Analyzing...",
        failedToGenerate: "Failed to generate",
        operationCancelled: "Operation cancelled",
        noMdFiles: "No Markdown files found",
        noParentFolder: "No parent folder found",
        buildingTagNetwork: "Building tag network...",
        noTagsFound: "No tags found",
        noTagConnections: "No tag connections",
        failedToBuildNetwork: "Failed to build network",
        successfullyClearedAll: "Successfully cleared all tags",
        failedToClearVault: "Failed to clear vault tags",
        pleaseOpenNote: "Please open a note",
        failedToUpdate: "Failed to update",
        analyzingFiles: "Analyzing files...",
        successfullyTagged: "Successfully tagged",
        progress: "Progress",
        completed: "Completed",
        connectionTestSuccess: "Connection test successful",
        connectionTestFailed: "Connection test failed",
        localServiceNotRunning: "Local service is not running",
        localServiceNotAvailable: "Local service is not available",
        tagsAlreadyUpToDate: "Tags already up to date",
        noValidTags: "No valid tags",
        errorClearingTags: "Error clearing tags",
        errorUpdatingTags: "Error updating tags",
        tagsSavedTo: "Tags saved to",
        errorSavingTags: "Error saving tags",
        failedToLoadEndpoints: "Failed to load endpoints",
        debugModeToggle: "Debug mode toggled",
        openNoteFirst: "Please open a note first",
        noParentFolderFound: "No parent folder found",
        noMarkdownFilesFound: "No Markdown files found",
        noContentToAnalyze: "No content to analyze",
        failedToGenerateTags: "Failed to generate tags",
        generateTagsForFolderConfirm: "Are you sure you want to generate tags for all Markdown files in the current folder? This may take some time for folders with multiple files.",
        generateTagsForVaultConfirm: "Are you sure you want to generate tags for all Markdown files in your vault? This may take a long time depending on your vault size.",
        generateTagsForSelectedConfirm: "Are you sure you want to generate tags for the selected {count} files? This may take some time.",
        generateTagsInProgress: "Analyzing {current}/{total} files...",
        tagsGeneratedSuccessfully: "Successfully generated tags for {success}/{total} files",
        failedToGenerateForFiles: "Error generating tags",
        progressPrefix: "Progress: {current}/{total}",
        completedPrefix: "Completed: {success}/{total}",
        restartRequired: "Restart required after changing language",
        languageChangeNotice: "Language has been changed. Please restart Obsidian for changes to take effect.",
        assignPredefinedTagsForCurrentNote: "Assign predefined tags to current note",
        assignPredefinedTagsForCurrentFolder: "Assign predefined tags to current folder",
        assignPredefinedTagsForVault: "Assign predefined tags to vault",
        setTagsFile: "Please set tags file path",
        noTagsInFile: "No tags in tags file",
        noMatchingTags: "No matching tags",
        assignFailed: "Assign tags failed",
        assignPredefinedTagsForFolderConfirm: "Are you sure you want to assign predefined tags to {count} files in the current folder?",
        assigningPredefinedTagsToFolder: "Assigning predefined tags to {count} files in folder...",
        assignPredefinedTagsForVaultConfirm: "Are you sure you want to assign predefined tags to {count} files in the vault?",
        assigningPredefinedTagsToVault: "Assigning predefined tags to {count} files in vault...",
        failedToAssignPredefinedTagsFolder: "Failed to assign predefined tags to folder",
        failedToAssignPredefinedTags: "Failed to assign predefined tags",
        clearTagsForFolderConfirm: "Are you sure you want to clear tags from {count} files in the current folder?",
        tagsClearedFrom: "Cleared tags from {count} files",
        failedToClearTags: "Failed to clear tags",
        noTagsInVault: "No tags found in vault",
        successfullyClearedAllVault: "Successfully cleared all tags from vault",
        failedToClearVaultTags: "Failed to clear vault tags",
        viewTagNetwork: "View tag relationships network",
        analyzeTagCurrentNote: "Analyze and tag current note",
        noMatchingFiles: "No matching files",
        errorLoadingFiles: "Error loading files",
        noActiveFile: "No active file",
        noPredefinedTagsFound: "No predefined tags found"
    },

    // Modal dialogs
    modals: {
        warning: "Warning",
        confirm: "Confirm",
        cancel: "Cancel",
        clearAllTagsConfirm: "Are you sure you want to clear all tags from all notes? This action cannot be undone.",
        generateFolderConfirm: "Are you sure you want to generate tags for all Markdown files in the current folder? This may take some time for folders with multiple files.",
        generateVaultConfirm: "Are you sure you want to generate tags for all Markdown files in your vault? This may take a long time depending on your vault size.",
        generateSelectedConfirm: "Are you sure you want to generate tags for the selected {count} files? This may take some time.",
        saveTagsConfirm: "This will overwrite the file content with all unique tags. Continue?",
        excludedFilesTitle: "Excluded files",
        excludedFilesSubtitle: "Files matching the following filters are currently excluded:",
        addButton: "Add",
        clearAllButton: "Clear All",
        clearAllConfirm: "Are you sure you want to remove all excluded paths?",
        cancelButton: "Cancel",
        saveButton: "Save",
        noMatchingPaths: "No matching paths found",
        useAsPattern: "Use \"{searchTerm}\" as pattern",
        moreResults: "more results...",
        errorLoadingPaths: "Error loading paths",
        noExclusionsDefined: "No exclusions defined yet.",
        filterLabel: "Filter",
        pathPlaceholder: "Enter path or \"/regex/\""
    },

    // File menu items
    fileMenu: {
        tagNetwork: "Tag Network"
    },

    // Dropdown options
    dropdowns: {
        localLLM: "Local LLM",
        cloudService: "Cloud Service",
        openai: "OpenAI",
        gemini: "Gemini",
        deepseek: "DeepSeek",
        aliyun: "Aliyun",
        claude: "Claude",
        groq: "Groq",
        vertex: "Vertex AI",
        openrouter: "OpenRouter",
        bedrock: "AWS Bedrock",
        requesty: "Requesty",
        cohere: "Cohere",
        grok: "Grok",
        mistral: "Mistral",
        openaiCompatible: "OpenAI Compatible",
        localai: "LocalAI",
        lmStudio: "LM Studio",
        jan: "Jan",
        koboldcpp: "KoboldCpp"
    },

    // Tips
    tips: {
        ollama: "Make sure Ollama is running and accessible at http://localhost:11434",
        localai: "Make sure LocalAI is running and configured with the correct endpoint",
        lmStudio: "Make sure LM Studio is running and the server is enabled",
        jan: "Make sure Jan is running and the local server is activated",
        koboldcpp: "Make sure KoboldCpp is running and the API endpoint is accessible"
    }
};